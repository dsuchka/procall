// push constants
    0x00            debug (return mem from 0x0 to 0x1000 address, first 4kb)
--
    0x01..0x80      push constants 0x01..0x80   (pushConst)
    0x81..0x8F      push constants 0xA0..0x260  (pushConstX32)
--
    0xF0            push constant 0x00          (pushZero)
    0xFF            push constant 0xFFF...FFF   (pushNegativeOne)

// push data
    0x90..0xAF      push next [1..32] bytes (pushData)

// stack ops
    0xB0        POP         pop 1 stack element                                 [ pop 1 ]   <?>
    0xB1        DUP         push K'th stack element (K in words)                [ pop 1 ]   <k>
    0xB2        SWAP        swap (stack[0]-2, stack[-1]-2) elements (words)     [ pop 2 ]   <i> <j>

// special stack ops and data management
    0xB3        TOP_PTR     push current top_ptr (points to the value itself)
    0xB4        STACK_PTR   push current stack_ptr (points to the beggining of the stack)

    0xB5        ALLOC_N     move top_ptr forward for the N (N in bytes)         [ pop 1 ]   <n>
                                and push pointer to the beginning
                                of the data region onto the stack

    0xB5        REWIND_N    rewind top_ptr:
                                top_ptr = top_ptr - N (N in bytes)              [ pop 1 ]   <n>

    0xB6        TRUNC_N     set stack size to be N (N in bytes)                 [ pop 1 ]   <n>
                                top_ptr = stack_ptr + N

    0xB7        ALIGN       align top_ptr to word size (0x20):
                                top_ptr = (top_ptr + 0x1F) & (~0x1F)

    0xB8        DLOAD       load word at the ptr and push it on the stack       [ pop 1 ]   <ptr>
                                (stack[0] = *stack[0])
                            NOTE: it's allowed to load data from previous
                                stack frames (thus data can be accessed on
                                top level from deep invocations)

    0xB9        DSAVE       save data word at the ptr                           [ pop 2 ] <data> <ptr>
                            NOTE: the ptr to write at MUST BE within the
                                current stack frame (i. e. data_ptr >= stack_ptr)

// boolean ops
    0xBA        ISZERO  (stack[0] = iszero(stack[0]))
    0xBB        LT      (stack[-1] = stack[-1] < stack[0])              [ pop 1 ]
    0xBC        GT      (stack[-1] = stack[-1] > stack[0])              [ pop 1 ]
    0xBD        SLT     (stack[-1] = stack[-1] <' stack[0])             [ pop 1 ]   *signed
    0xBE        SGT     (stack[-1] = stack[-1] >' stack[0])             [ pop 1 ]   *signed
    0xBF        IIF     (stack[-2] = stack[0] ? stack[-1] : stack[-2])  [ pop 2 ]

// math (arithmetical) ops
    0xC0        ADD     (stack[-1] = stack[-1] + stack[0])  [ pop 1 ]
    0xC1        SUB     (stack[-1] = stack[-1] - stack[0])  [ pop 1 ]
    0xC2        MUL     (stack[-1] = stack[-1] * stack[0])  [ pop 1 ]
    0xC3        DIV     (stack[-1] = stack[-1] / stack[0])  [ pop 1 ]
    0xC4        SDIV    (stack[-1] = stack[-1] /' stack[0]) [ pop 1 ]   *signed
    0xC5        MOD     (stack[-1] = stack[-1] % stack[0])  [ pop 1 ]
    0xC6        SMOD    (stack[-1] = stack[-1] %' stack[0]) [ pop 1 ]   *signed
    0xC7        EXP     (stack[-1] = stack[-1] ** stack[0]) [ pop 1 ]
    0xC8        NEG     (stack[0] = -stack[0])

// bit ops
    0xC9        NOT     (stack[0] = ~stack[0])
    0xCA        AND     (stack[-1] = stack[-1] & stack[0])      [ pop 1 ]
    0xCB        OR      (stack[-1] = stack[-1] | stack[0])      [ pop 1 ]
    0xCC        XOR     (stack[-1] = stack[-1] ^ stack[0])      [ pop 1 ]
    0xCD        SHL     (stack[-1] = stack[-1] << stack[0])     [ pop 1 ]
    0xCE        SHR     (stack[-1] = stack[-1] >> stack[0])     [ pop 1 ]
    0xCF        SAR     (stack[-1] = stack[-1] >>' stack[0])    [ pop 1 ]   *signed

// runtime blockchain data ops
    0xD0        ADDRESS     push current contract execution address (self)
    0xD1        CALLER      push caller address (msg.sender)
    0xD2        ORIGIN      push tx sender address (origin)
    0xD3        CALLVALUE   push call value (msg.value)
    0xD4        SELFBALANCE push balance of the current contract execution (self) address
    0xD5        TIMESTAMP   push current block time stamp (epoch seconds)
    0xD6        BLOCKNUMBER push current block number
    0xD7        GASLEFT     push remaining gas value
    0xD8        BALANCEOF   (stack[0] = balance(address(stack[0])))

    (0xD9..0xDB reserved)

// storage ops
    0xDC        SLOAD       (stack[0] = sload(stack[0]))
    0xDD        SSTORE      (sstore(stack[-1], stack[0]))       [ pop 2 ]   <slot> <data>
    0xDE        TLOAD       (stack[0] = tload(stack[0]))
    0xDF        TSTORE      (tstore(stack[-1], stack[0]))       [ pop 2 ]   <slot> <data>


    ** CALL_CODES **

// execution (call) ops
    0xE0        CALL            do normal call              [ pop 2 ]   <size> <addr>
    0xE1        CALLCODE        do callcode call            [ pop 2 ]   <size> <addr>
    0xE2        DELEGATECALL    do delegate call            [ pop 2 ]   <size> <addr>
    0xE3        STATICCALL      do static call              [ pop 2 ]   <size> <addr>
    0xE4        PRECOMPCALL     do call with no selector    [ pop 2 ]   <size> <addr>

* NOTE: call_ptr points to a memory region of call data where first word consists of:
    [128 bits call value (64-bit value is used for TRON)]
    [32 bits gas limit (0 - auto)]
    [64 bits token_id value (when calltoken exec)]
    [32 bits selector (calldata starts from here)]
  =>[vvvv.vvvv.vvvv.vvvv.(gggg).<tttt.tttt>.<ssss>][args...] ... | [<payload size>] [<call address>]
     ^--- call value      ^gas   ^token_id   ^--- selector       ^--- top_ptr (after pop 2)
     ^-------------------( payload size )------------------- ... --=--Â´


// execution result management ops
    0xE5        RETDATASZIE     push data size of last call result
    0xE6        PUSHRETDATA     push (copies) return data onto stack        [ pop 2 ]   <from> <len>
    0xE7        VERIFYCALL      check last call code, reverts if unsuccess with return data


    ** SYSTEM_CODES **

// register ops
    0xE8        RLOAD       (stack[0] = reg[stack[0]])
    0xE9        RSAVE       (reg[stack[0]] = stack[-1])                     [ pop 2 ]   <data> <reg>

// code evaluation ops
    0xEA        FINISH      stop evaluation, return with the full stack data
    0xEB        REVERT      stop evaluation, revert with the full stack data
    0xEC        FINISH_N    stop evaluation, return with n last bytes of the stack
    0xED        REVERT_N    stop evaluation, revert with n last bytes of the stack

    (0xEE..0xEF reserved)

    ** SPECIAL_CODES **

// constants 0 and -1
    0xF0        PUSH0       push constant zero
    0xFF        PUSHNEGONE  push constant -1 (negative one)

    (0xF1..0xF5 reserved)

// conditional ops
    0xF6        DOIF        evaluate next code only if condition is true    [ pop 1 ]   <cond>
    0xF7        DOIF_REWIND DOIF-else-REWIND                                [ pop 2 ]   <cond> <size>

// invocation ops
    0xF8        GOTO        go to code address (return from an invocation)          [ pop 1 ]   <addr>
    0xF9        INVOKETHIS  push next code address and jump within current code     [ pop 1 ]   <offset>
    0xFA        INVOKENEXT  push operating data, alloc new registers, update ptrs
                                and jump to a new code on the stack                 [ pop 2 ]   <code_sz> <data_sz>
                            NOTE: to return from the invocation the FINISH/REVERT
                                opcodes can be used

// other ops
    0xFB        SHA3    pop a data region and push hash of the popped data:
                            first, pop the size of the data                         [ pop 1 ]   <size>
                            then, rewind for the size and push the hash             [ rewind ]

    (0xFC  reserved)

    0xFD        debug (till top)
    0xFE        extended codes prefix
--


    ** EXTENDED_CODES **

// other blockchain data ops
    0x00        CHAINID     push current chain id
    0x01        BASEFEE     push base fee value
    0x02        GASPRICE    push gas price value
    0x03        COINBASE    push current block mining beneficiary address
    0x04        DIFFICULTY  push current block difficulty
    0x05        GASLIMIT    push current block gas limit

// Tron specific opcodes
    0xE4        CALLTOKEN   do calltoken call           [ pop 2 ]   <size> <addr>

