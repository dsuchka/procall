// SPDX-License-Identifier: BUSL-1.1
// Copyright (c) 2025 Evgenii Kozlov [dsuchka@gmail.com]
// Licensed under the Business Source License 1.1.

// Usage is permitted for non-commercial purposes only, under the terms of BUSL-1.1.
// Change Date: 2030-01-01
// On the Change Date, this license will automatically convert to GPL-3.0-or-later,
// granting full rights under the GNU General Public License.
//
// For more information, see https://github.com/mariadb/bsl
//                           https://opensource.org/licenses/BUSL-1.1
//                           https://spdx.org/licenses/BUSL-1.1.html
//                           https://www.hashicorp.com/en/bsl


#include "basic.huff"
#include "tvm_opcodes.huff"
#include "constants.huff"

#define macro LOAD_OWNER() = takes(0) returns(1) {
    ZERO() sload
}

#define macro LOAD_IMPLEMENTATION() = takes(0) returns(1) {
    [IMPLEMENTATION_SLOT] sload
}

#define macro SAVE_OWNER() = takes(1) returns(0) {
    ZERO() sstore
}

#define macro SAVE_IMPLEMENTATION() = takes(1) returns(0) {
    [IMPLEMENTATION_SLOT] sstore
}


#define macro RETURN_SHORT_MESSAGE() = takes(2) returns(0) {
    // Input stack: [<sz>, <__str>]
    0x20                                // [0x20, <sz>, <__str>]
    dup1 ZERO()                         // [0x00, 0x20, 0x20, <sz>, <__str>]
    mstore                              // [0x20, <sz>, <__str>]
                                        // | mem[0:0x60]=[00..20]

    dup2 dup2                           // [0x20, <sz>, 0x20, <sz>, <__str>]
    mstore                              // [0x20, <sz>, <__str>]
                                        // | mem[0:0x60]=[00..20][00..<sz>]

    sub                                 // [<0x20-sz>, <__str>]
    0x03 shl                            // [<(0x20-sz)*8>, <__str>]
    shl                                 // [<str__>]
    0x40 mstore                         // []
                                        // | mem[0:0x60]=[00..20][00..<sz>][<str__>]
    0x60 ZERO() return
}

#define macro PUSH_ARGS_FOR_RETURN_SHORT_MESSAGE(str, len, jmp_to) = takes(0) returns(0) {
    <str> <len> <jmp_to> jump
}

#define macro CHECK_CALLER_IS_OWNER_OR_SELF(success_label, failed_label) = takes(0) returns(0) {
    caller LOAD_OWNER() eq          // [<caller == owner>]
    caller address eq               // [<caller == self>, <caller == owner>]
    or                              // [<caller in (owner, self)>]
    <success_label> jumpi           // []
    <failed_label> jump
}

#define macro REVERT_ERROR_NO_ARGS() = takes(1) returns(0) {
    // Input stack:         // [<__error_selector>]
    ZERO() mstore           // []
    0x04 0x1C revert
}

#define macro REVERT_ERROR_1_ARG() = takes(1) returns(0) {
    // Input stack:         // [<__error_selector>, <value>]
    ZERO() mstore           // [<value>]
    0x20 mstore             // []
    0x24 0x1C revert
}

// LAT -- Least Accessed Top (to check stack underflow error)
#define macro CHECK_PTRS_AND_HANDLE_NEXT_LAT(handle_next_lat_label, recheck_lat_label) = takes(13) returns(13) {
    // Input stack:                 // [<LAT>, | <CP>, <TOP>, <CE>, <SP>, const...]
    dup1                            // [<LAT>, <LAT>, | <CP>, <TOP>, <CE>, <SP>, const...]
    dup5 sgt iszero                 // [(SP <= LAT), <LAT>, | <CP>, <TOP>, <CE>, <SP>, const...]
    dup5 dup4 slt                   // [(CP < CE), (SP <= LAT), <LAT>, | <CP>, <TOP>, <CE>, <SP>, const...]
    and                             // [<ptrs_ok>, <LAT>, | <CP>, <TOP>, <CE>, <SP>, const...]
    <handle_next_lat_label> jumpi   // [<LAT>, | <CP>, <TOP>, <CE>, <SP>, const...]
    <recheck_lat_label> jump        // [<LAT>, | <CP>, <TOP>, <CE>, <SP>, const...]
}

#define macro EVAL_UNARY_OPCODE_BEGIN() = takes(13) returns(15) {
    // Input stack:                 // [<CP>, <TOP>, <CE>, <SP>, const...]
    dup10 dup3 sub                  // [<(top-1)_ptr>, | <CP>, <TOP>, <CE>, <SP>, const...]
    dup1 mload                      // [<stack[0]>, <(top-1)_ptr>, | <CP>, <TOP>, <CE>, <SP>, const...]
}

#define macro EVAL_UNARY_OPCODE_END() = takes(15) returns(14) {
    // Input stack:                 // [<VALUE>, <(top-1_ptr), | <CP>, <TOP>, <CE>, <SP>, ...]
    dup2 mstore                     // [<(top-1_ptr), | <CP>, <TOP>, <CE>, <SP>, const...]
}

#define macro EVAL_UNARY_OPCODE(todo_op) = takes(13) returns(14) {
    // Input stack:                 // [<CP>, <TOP>, <CE>, <SP>, const...]
    EVAL_UNARY_OPCODE_BEGIN()       // [<stack[0]>, <(top-1)_ptr>, | ...]
    <todo_op>                       // [<VALUE>, <(top-1)_ptr>, | ...]
    EVAL_UNARY_OPCODE_END()         // [<(top-1)_ptr>, | <CP>, <TOP>, <CE>, <SP>, const...]

    // NOTE: LAT = (top-1)_ptr
}

#define macro EVAL_BINARY_OPCODE_BEGIN() = takes(13) returns(16) {
    // Input stack:                 // [<CP>, <TOP>, <CE>, <SP>, const...]
    dup11 dup11                     // [0x20, 0x40, | <CP>, <TOP>, <CE>, <SP>, const...]
    dup4 sub                        // [<(top-1)_ptr>, 0x40, | <CP>, <TOP>, <CE>, <SP>, const...]
    swap3                           // [<TOP>, 0x40, | <CP>, <(top-1)_ptr>, <CE>, <SP>, const...]
    sub                             // [<(top-2)_ptr>, | <CP>, <(top-1)_ptr>, <CE>, <SP>, const...]
    dup1 mload                      // [<stack[-1]>, <(top-2)_ptr>, | <CP>, <(top-1)_ptr>, <CE>, <SP>, const...]
    dup4 mload                      // [<stack[0]>, <stack[-1]>, <(top-2)_ptr>, | <CP>, <(top-1)_ptr>, <CE>, <SP>, const...]

    // NOTE: FROM HERE <(top-1)_ptr> becomes a new TOP
}

#define macro EVAL_BINARY_OPCODE_END() = takes(15) returns(14) {
    // Input stack:                 // [<VALUE>, <(top-2)_ptr>, | <CP>, <TOP>, <CE>, <SP>, const...]
    dup2 mstore                     // [<(top-2)_ptr>, | <CP>, <TOP>, <CE>, <SP>, const...]

    // NOTE: LAT = (top-2)_ptr
}

#define macro EVAL_BINARY_OPCODE_REVERSED(todo_op) = takes(13) returns(14) {
    // Input stack:                 // [<CP>, <TOP>, <CE>, <SP>, const...]
    EVAL_BINARY_OPCODE_BEGIN()      // [<stack[0]>, <stack[-1]>, <(top-2)_ptr>, | ...]
    swap1 <todo_op>                 // [<VALUE>, <(top-2)_ptr>, | ...]
    EVAL_BINARY_OPCODE_END()        // [<(top-2)_ptr>, | <CP>, <TOP>, <CE>, <SP>, const...]
}

#define macro EVAL_BINARY_OPCODE_DIRECT(todo_op) = takes(13) returns(14) {
    // Input stack:                 // [<CP>, <TOP>, <CE>, <SP>, const...]
    EVAL_BINARY_OPCODE_BEGIN()      // [<stack[0]>, <stack[-1]>, <(top-2)_ptr>, | ...]
    <todo_op>                       // [<VALUE>, <(top-2)_ptr>, | ...]
    EVAL_BINARY_OPCODE_END()        // [<(top-2)_ptr>, | <CP>, <TOP>, <CE>, <SP>, const...]
}

